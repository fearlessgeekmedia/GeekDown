{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/components/src/__internal__/meta.ts", "../../../../node_modules/@milkdown/components/src/image-inline/config.ts", "../../../../node_modules/@milkdown/components/src/__internal__/helper.ts", "../../../../node_modules/@milkdown/components/src/image-inline/component.ts", "../../../../node_modules/@milkdown/components/src/image-inline/view.ts", "../../../../node_modules/@milkdown/components/src/image-inline/index.ts", "../../../../node_modules/@milkdown/crepe/src/feature/image-block/index.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface InlineImageConfig {\n  imageIcon: () => ReturnType<typeof html>\n  uploadButton: () => ReturnType<typeof html>\n  confirmButton: () => ReturnType<typeof html>\n  uploadPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n  proxyDomURL?: (url: string) => Promise<string> | string\n}\n\nexport const defaultInlineImageConfig: InlineImageConfig = {\n  imageIcon: () => '🌌',\n  uploadButton: () => html`Upload`,\n  confirmButton: () => html`⏎`,\n  uploadPlaceholderText: '/Paste',\n  onUpload: (file) => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const inlineImageConfig = $ctx(\n  defaultInlineImageConfig,\n  'inlineImageConfigCtx'\n)\n\nwithMeta(inlineImageConfig, {\n  displayName: 'Config<image-inline>',\n  group: 'ImageInline',\n})\n", "export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import { c, html, useRef, useState } from 'atomico'\nimport type { Component } from 'atomico'\nimport { customAlphabet } from 'nanoid'\nimport clsx from 'clsx'\nimport type { InlineImageConfig } from './config'\n\nexport interface Attrs {\n  src: string\n  alt: string\n  title: string\n}\n\nexport type InlineImageComponentProps = Attrs & {\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  selected: boolean\n  config: InlineImageConfig\n}\n\nconst nanoid = customAlphabet('abcdefg', 8)\n\nexport const inlineImageComponent: Component<InlineImageComponentProps> = ({\n  src = '',\n  selected = false,\n  alt,\n  title,\n  setAttr,\n  config,\n}) => {\n  const linkInput = useRef<HTMLInputElement>()\n  const [uuid] = useState(nanoid())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file) return\n\n    const url = await config?.onUpload(file)\n    if (!url) return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  return html`<host class=${clsx(selected && 'selected', !src && 'empty')}>\n    ${!src\n      ? html`<div class=\"empty-image-inline\">\n          <div class=\"image-icon\">${config?.imageIcon()}</div>\n          <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n            <input\n              draggable=\"true\"\n              ref=${linkInput}\n              ondragstart=${preventDrag}\n              class=\"link-input-area\"\n              value=${currentLink}\n              oninput=${onEditLink}\n              onkeydown=${onKeydown}\n              onfocus=${() => setFocusLinkInput(true)}\n              onblur=${() => setFocusLinkInput(false)}\n            />\n            <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n              <input\n                class=\"hidden\"\n                id=${uuid}\n                type=\"file\"\n                accept=\"image/*\"\n                onchange=${onUpload}\n              />\n              <label class=\"uploader\" for=${uuid}>\n                ${config?.uploadButton()}\n              </label>\n              <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n                ${config?.uploadPlaceholderText}\n              </span>\n            </div>\n          </div>\n          <div\n            class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n            onclick=${() => onConfirmLinkInput()}\n          >\n            ${config?.confirmButton()}\n          </div>\n        </div>`\n      : html`<img class=\"image-inline\" src=${src} alt=${alt} title=${title} />`}\n  </host>`\n}\n\ninlineImageComponent.props = {\n  src: String,\n  alt: String,\n  title: String,\n  selected: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const InlineImageElement = c(inlineImageComponent)\n", "import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { imageSchema } from '@milkdown/preset-commonmark'\nimport type { Node } from '@milkdown/prose/model'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { InlineImageComponentProps } from './component'\nimport { InlineImageElement } from './component'\nimport { inlineImageConfig } from './config'\n\ndefIfNotExists('milkdown-image-inline', InlineImageElement)\nexport const inlineImageView = $view(\n  imageSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const dom = document.createElement(\n        'milkdown-image-inline'\n      ) as HTMLElement & InlineImageComponentProps\n      const config = ctx.get(inlineImageConfig.key)\n      const proxyDomURL = config.proxyDomURL\n      const bindAttrs = (node: Node) => {\n        if (!proxyDomURL) {\n          dom.src = node.attrs.src\n        } else {\n          const proxiedURL = proxyDomURL(node.attrs.src)\n          if (typeof proxiedURL === 'string') {\n            dom.src = proxiedURL\n          } else {\n            proxiedURL.then((url) => {\n              dom.src = url\n            })\n          }\n        }\n        dom.alt = node.attrs.alt\n        dom.title = node.attrs.title\n      }\n      bindAttrs(initialNode)\n      dom.selected = false\n      dom.setAttr = (attr, value) => {\n        const pos = getPos()\n        if (pos == null) return\n\n        view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n      }\n      dom.config = config\n      return {\n        dom,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          bindAttrs(updatedNode)\n          return true\n        },\n        stopEvent: (e) => {\n          if (dom.selected && e.target instanceof HTMLInputElement) return true\n\n          return false\n        },\n        selectNode: () => {\n          dom.selected = true\n        },\n        deselectNode: () => {\n          dom.selected = false\n        },\n        destroy: () => {\n          dom.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(inlineImageView, {\n  displayName: 'NodeView<image-inline>',\n  group: 'ImageInline',\n})\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { inlineImageConfig } from './config'\nimport { inlineImageView } from './view'\n\nexport * from './config'\nexport * from './view'\n\nexport const imageInlineComponent: MilkdownPlugin[] = [\n  inlineImageConfig,\n  inlineImageView,\n]\n", "import {\n  imageBlockComponent,\n  imageBlockConfig,\n} from '@milkdown/kit/component/image-block'\nimport {\n  imageInlineComponent,\n  inlineImageConfig,\n} from '@milkdown/kit/component/image-inline'\nimport type { DefineFeature, Icon } from '../shared'\nimport { captionIcon, confirmIcon, imageIcon } from '../../icons'\n\ninterface ImageBlockConfig {\n  onUpload: (file: File) => Promise<string>\n  proxyDomURL: (url: string) => Promise<string> | string\n\n  inlineImageIcon: Icon\n  inlineConfirmButton: Icon\n  inlineUploadButton: Icon\n  inlineUploadPlaceholderText: string\n  inlineOnUpload: (file: File) => Promise<string>\n\n  blockImageIcon: Icon\n  blockConfirmButton: Icon\n  blockCaptionIcon: Icon\n  blockUploadButton: Icon\n  blockCaptionPlaceholderText: string\n  blockUploadPlaceholderText: string\n  blockOnUpload: (file: File) => Promise<string>\n}\n\nexport type ImageBlockFeatureConfig = Partial<ImageBlockConfig>\n\nexport const defineFeature: DefineFeature<ImageBlockFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => {\n      ctx.update(inlineImageConfig.key, (value) => ({\n        uploadButton: config?.inlineUploadButton ?? (() => 'Upload'),\n        imageIcon: config?.inlineImageIcon ?? (() => imageIcon),\n        confirmButton: config?.inlineConfirmButton ?? (() => confirmIcon),\n        uploadPlaceholderText:\n          config?.inlineUploadPlaceholderText ?? 'or paste link',\n        onUpload: config?.inlineOnUpload ?? config?.onUpload ?? value.onUpload,\n        proxyDomURL: config?.proxyDomURL,\n      }))\n      ctx.update(imageBlockConfig.key, (value) => ({\n        uploadButton: config?.blockUploadButton ?? (() => 'Upload file'),\n        imageIcon: config?.blockImageIcon ?? (() => imageIcon),\n        captionIcon: config?.blockCaptionIcon ?? (() => captionIcon),\n        confirmButton: config?.blockConfirmButton ?? (() => 'Confirm'),\n        captionPlaceholderText:\n          config?.blockCaptionPlaceholderText ?? 'Write Image Caption',\n        uploadPlaceholderText:\n          config?.blockUploadPlaceholderText ?? 'or paste link',\n        onUpload: config?.blockOnUpload ?? config?.onUpload ?? value.onUpload,\n        proxyDomURL: config?.proxyDomURL,\n      }))\n    })\n    .use(imageBlockComponent)\n    .use(imageInlineComponent)\n}\n"],
  "mappings": "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",
  "names": []
}
