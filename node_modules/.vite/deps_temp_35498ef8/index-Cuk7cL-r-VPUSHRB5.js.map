{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/components/src/__internal__/meta.ts", "../../../../node_modules/@milkdown/components/src/__internal__/helper.ts", "../../../../node_modules/@milkdown/components/src/list-item-block/component.ts", "../../../../node_modules/@milkdown/components/src/list-item-block/config.ts", "../../../../node_modules/@milkdown/components/src/list-item-block/view.ts", "../../../../node_modules/@milkdown/components/src/list-item-block/index.ts", "../../../../node_modules/@milkdown/crepe/src/feature/list-item/index.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import type { Component } from 'atomico'\nimport { c, html, useHost, useLayoutEffect, useRef } from 'atomico'\nimport type { ListItemBlockConfig } from './config'\n\ninterface Attrs {\n  label: string\n  checked: boolean\n  listType: string\n}\n\nexport type ListItemComponentProps = Attrs & {\n  config: ListItemBlockConfig\n  readonly: boolean\n  selected: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  onMount: () => void\n}\n\nexport const listItemComponent: Component<ListItemComponentProps> = ({\n  selected,\n  label = '',\n  listType = '',\n  checked,\n  onMount,\n  setAttr,\n  config,\n  readonly,\n}) => {\n  const host = useHost()\n  const contentWrapperRef = useRef<HTMLDivElement>()\n\n  useLayoutEffect(() => {\n    const current = contentWrapperRef.current\n    if (!current) return\n\n    const contentDOM = host.current.querySelector('[data-content-dom]')\n\n    if (contentDOM) {\n      current.appendChild(contentDOM)\n      onMount?.()\n    }\n  }, [])\n\n  const onClickLabel = () => {\n    if (checked == null) return\n\n    setAttr?.('checked', !checked)\n  }\n\n  const labelProps = {\n    label,\n    listType,\n    checked,\n    readonly,\n  }\n\n  return html`<host class=${selected && 'ProseMirror-selectednode'}>\n    <li class=\"list-item\">\n      <div\n        class=\"label-wrapper\"\n        onclick=${onClickLabel}\n        contenteditable=\"false\"\n      >\n        ${config?.renderLabel(labelProps)}\n      </div>\n      <div class=\"children\" ref=${contentWrapperRef}></div>\n    </li>\n  </host>`\n}\n\nlistItemComponent.props = {\n  label: String,\n  checked: Boolean,\n  readonly: Boolean,\n  listType: String,\n  config: Object,\n  selected: Boolean,\n  setAttr: Function,\n  onMount: Function,\n}\n\nexport const ListItemElement = c(listItemComponent)\n", "import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\ninterface RenderLabelProps {\n  label: string\n  listType: string\n  readonly?: boolean\n  checked?: boolean\n}\n\nexport interface ListItemBlockConfig {\n  renderLabel: (props: RenderLabelProps) => void\n}\n\nexport const defaultListItemBlockConfig: ListItemBlockConfig = {\n  renderLabel: ({ label, listType, checked, readonly }: RenderLabelProps) => {\n    if (checked == null)\n      return html`<span class=\"label\"\n        >${listType === 'bullet' ? 'â¦¿' : label}</span\n      >`\n\n    return html`<input\n      disabled=${readonly}\n      class=\"label\"\n      type=\"checkbox\"\n      checked=${checked}\n    />`\n  },\n}\n\nexport const listItemBlockConfig = $ctx(\n  defaultListItemBlockConfig,\n  'listItemBlockConfigCtx'\n)\n\nwithMeta(listItemBlockConfig, {\n  displayName: 'Config<list-item-block>',\n  group: 'ListItemBlock',\n})\n", "import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { Node } from '@milkdown/prose/model'\nimport { listItemSchema } from '@milkdown/preset-commonmark'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { ListItemComponentProps } from './component'\nimport { ListItemElement } from './component'\nimport { listItemBlockConfig } from './config'\n\ndefIfNotExists('milkdown-list-item-block', ListItemElement)\nexport const listItemBlockView = $view(\n  listItemSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const dom = document.createElement(\n        'milkdown-list-item-block'\n      ) as HTMLElement & ListItemComponentProps\n      const contentDOM = document.createElement('div')\n      contentDOM.setAttribute('data-content-dom', 'true')\n      contentDOM.classList.add('content-dom')\n      const config = ctx.get(listItemBlockConfig.key)\n      const bindAttrs = (node: Node) => {\n        dom.listType = node.attrs.listType\n        dom.label = node.attrs.label\n        dom.checked = node.attrs.checked\n\n        dom.readonly = !view.editable\n      }\n\n      bindAttrs(initialNode)\n      dom.appendChild(contentDOM)\n      dom.selected = false\n      dom.setAttr = (attr, value) => {\n        const pos = getPos()\n        if (pos == null) return\n\n        view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n      }\n      dom.onMount = () => {\n        const { anchor, head } = view.state.selection\n        if (view.hasFocus()) {\n          setTimeout(() => {\n            const anchorPos = view.state.doc.resolve(anchor)\n            const headPos = view.state.doc.resolve(head)\n            view.dispatch(\n              view.state.tr.setSelection(new TextSelection(anchorPos, headPos))\n            )\n          })\n        }\n      }\n      let node = initialNode\n      dom.config = config\n      return {\n        dom,\n        contentDOM,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          if (\n            updatedNode.sameMarkup(node) &&\n            updatedNode.content.eq(node.content)\n          )\n            return true\n\n          node = updatedNode\n          bindAttrs(updatedNode)\n          return true\n        },\n        ignoreMutation: (mutation) => {\n          if (!dom || !contentDOM) return true\n\n          if ((mutation.type as unknown) === 'selection') return false\n\n          if (contentDOM === mutation.target && mutation.type === 'attributes')\n            return true\n\n          if (contentDOM.contains(mutation.target)) return false\n\n          return true\n        },\n        selectNode: () => {\n          dom.selected = true\n        },\n        deselectNode: () => {\n          dom.selected = false\n        },\n        destroy: () => {\n          dom.remove()\n          contentDOM.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(listItemBlockView, {\n  displayName: 'NodeView<list-item-block>',\n  group: 'ListItemBlock',\n})\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { listItemBlockView } from './view'\nimport { listItemBlockConfig } from './config'\n\nexport * from './component'\nexport * from './config'\nexport * from './view'\n\nexport const listItemBlockComponent: MilkdownPlugin[] = [\n  listItemBlockConfig,\n  listItemBlockView,\n]\n", "import type { Ctx } from '@milkdown/kit/ctx'\nimport {\n  listItemBlockComponent,\n  listItemBlockConfig,\n} from '@milkdown/kit/component/list-item-block'\nimport { html } from 'atomico'\nimport clsx from 'clsx'\nimport type { DefineFeature, Icon } from '../shared'\nimport {\n  bulletIcon,\n  checkBoxCheckedIcon,\n  checkBoxUncheckedIcon,\n} from '../../icons'\n\nexport interface ListItemConfig {\n  bulletIcon: Icon\n  checkBoxCheckedIcon: Icon\n  checkBoxUncheckedIcon: Icon\n}\n\nexport type ListItemFeatureConfig = Partial<ListItemConfig>\n\nfunction configureListItem(ctx: Ctx, config?: ListItemFeatureConfig) {\n  ctx.set(listItemBlockConfig.key, {\n    renderLabel: ({ label, listType, checked, readonly }) => {\n      if (checked == null) {\n        if (listType === 'bullet')\n          return html`<span class=\"label\"\n            >${config?.bulletIcon?.() ?? bulletIcon}</span\n          >`\n\n        return html`<span class=\"label\">${label}</span>`\n      }\n\n      if (checked)\n        return html`<span\n          class=${clsx('label checkbox', readonly && 'readonly')}\n          >${config?.checkBoxCheckedIcon?.() ?? checkBoxCheckedIcon}</span\n        >`\n\n      return html`<span class=${clsx('label checkbox', readonly && 'readonly')}\n        >${config?.checkBoxUncheckedIcon?.() ?? checkBoxUncheckedIcon}</span\n      >`\n    },\n  })\n}\n\nexport const defineFeature: DefineFeature<ListItemFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => configureListItem(ctx, config))\n    .use(listItemBlockComponent)\n}\n"],
  "mappings": "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",
  "names": ["node"]
}
