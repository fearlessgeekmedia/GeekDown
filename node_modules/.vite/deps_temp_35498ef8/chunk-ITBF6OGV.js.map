{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/plugin-tooltip/src/tooltip-provider.ts", "../../../../node_modules/@milkdown/plugin-tooltip/src/tooltip-plugin.ts"],
  "sourcesContent": ["import type { EditorState } from '@milkdown/prose/state'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport throttle from 'lodash.throttle'\nimport type {\n  ComputePositionConfig,\n  Middleware,\n  VirtualElement,\n} from '@floating-ui/dom'\nimport { computePosition, flip, offset, shift } from '@floating-ui/dom'\nimport { posToDOMRect } from '@milkdown/prose'\n\n/// Options for tooltip provider.\nexport interface TooltipProviderOptions {\n  /// The tooltip content.\n  content: HTMLElement\n  /// The debounce time for updating tooltip, 200ms by default.\n  debounce?: number\n  /// The function to determine whether the tooltip should be shown.\n  shouldShow?: (view: EditorView, prevState?: EditorState) => boolean\n  /// The offset to get the block. Default is 0.\n  offset?:\n    | number\n    | {\n        mainAxis?: number\n        crossAxis?: number\n        alignmentAxis?: number | null\n      }\n  /// Other middlewares for floating ui. This will be added after the internal middlewares.\n  middleware?: Middleware[]\n  /// Options for floating ui. If you pass `middleware` or `placement`, it will override the internal settings.\n  floatingUIOptions?: Partial<ComputePositionConfig>\n  /// The root element that the tooltip will be appended to.\n  root?: HTMLElement\n}\n\n/// A provider for creating tooltip.\nexport class TooltipProvider {\n  /// @internal\n  readonly #debounce: number\n\n  /// @internal\n  readonly #shouldShow: (view: EditorView, prevState?: EditorState) => boolean\n\n  /// @internal\n  readonly #middleware: Middleware[]\n\n  /// @internal\n  readonly #floatingUIOptions: Partial<ComputePositionConfig>\n\n  /// @internal\n  readonly #root?: HTMLElement\n\n  /// @internal\n  #initialized = false\n\n  /// @internal\n  readonly #offset?:\n    | number\n    | {\n        mainAxis?: number\n        crossAxis?: number\n        alignmentAxis?: number | null\n      }\n\n  /// The root element of the tooltip.\n  element: HTMLElement\n\n  /// On show callback.\n  onShow = () => {}\n\n  /// On hide callback.\n  onHide = () => {}\n\n  constructor(options: TooltipProviderOptions) {\n    this.element = options.content\n    this.#debounce = options.debounce ?? 200\n    this.#shouldShow = options.shouldShow ?? this.#_shouldShow\n    this.#offset = options.offset\n    this.#middleware = options.middleware ?? []\n    this.#floatingUIOptions = options.floatingUIOptions ?? {}\n    this.#root = options.root\n    this.element.dataset.show = 'false'\n  }\n\n  /// @internal\n  #onUpdate = (view: EditorView, prevState?: EditorState): void => {\n    const { state, composing } = view\n    const { selection, doc } = state\n    const { ranges } = selection\n    const from = Math.min(...ranges.map((range) => range.$from.pos))\n    const to = Math.max(...ranges.map((range) => range.$to.pos))\n    const isSame =\n      prevState && prevState.doc.eq(doc) && prevState.selection.eq(selection)\n\n    if (!this.#initialized) {\n      const root = this.#root ?? view.dom.parentElement ?? document.body\n      root.appendChild(this.element)\n      this.#initialized = true\n    }\n\n    if (composing || isSame) return\n\n    if (!this.#shouldShow(view, prevState)) {\n      this.hide()\n      return\n    }\n\n    const virtualEl: VirtualElement = {\n      getBoundingClientRect: () => posToDOMRect(view, from, to),\n    }\n    computePosition(virtualEl, this.element, {\n      placement: this.#floatingUIOptions.placement ?? 'top',\n      middleware: [flip(), offset(this.#offset), shift(), ...this.#middleware],\n    }).then(({ x, y }) => {\n      Object.assign(this.element.style, {\n        left: `${x}px`,\n        top: `${y}px`,\n      })\n    })\n\n    this.show()\n  }\n\n  /// Update provider state by editor view.\n  update = (view: EditorView, prevState?: EditorState): void => {\n    const updater = throttle(this.#onUpdate, this.#debounce)\n\n    updater(view, prevState)\n  }\n\n  /// @internal\n  #_shouldShow(view: EditorView): boolean {\n    const { doc, selection } = view.state\n    const { empty, from, to } = selection\n\n    const isEmptyTextBlock =\n      !doc.textBetween(from, to).length &&\n      view.state.selection instanceof TextSelection\n\n    const isTooltipChildren = this.element.contains(document.activeElement)\n\n    const notHasFocus = !view.hasFocus() && !isTooltipChildren\n\n    const isReadonly = !view.editable\n\n    if (notHasFocus || empty || isEmptyTextBlock || isReadonly) return false\n\n    return true\n  }\n\n  /// Destroy the tooltip.\n  destroy = () => {}\n\n  /// Show the tooltip.\n  show = (virtualElement?: VirtualElement) => {\n    this.element.dataset.show = 'true'\n\n    if (virtualElement) {\n      computePosition(virtualElement, this.element, {\n        placement: 'top',\n        middleware: [flip(), offset(this.#offset)],\n        ...this.#floatingUIOptions,\n      }).then(({ x, y }) => {\n        Object.assign(this.element.style, {\n          left: `${x}px`,\n          top: `${y}px`,\n        })\n      })\n    }\n\n    this.onShow()\n  }\n\n  /// Hide the tooltip.\n  hide = () => {\n    if (this.element.dataset.show === 'false') return\n    this.element.dataset.show = 'false'\n\n    this.onHide()\n  }\n}\n", "import type { SliceType } from '@milkdown/ctx'\nimport type { PluginSpec } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { $Ctx, $Prose } from '@milkdown/utils'\nimport { $ctx, $prose } from '@milkdown/utils'\n\n/// @internal\nexport type TooltipSpecId<Id extends string> = `${Id}_TOOLTIP_SPEC`\n\n/// @internal\nexport type TooltipPlugin<Id extends string, State = any> = [\n  $Ctx<PluginSpec<State>, TooltipSpecId<Id>>,\n  $Prose,\n] & {\n  key: SliceType<PluginSpec<State>, TooltipSpecId<Id>>\n  pluginKey: $Prose['key']\n}\n\n/// Create a tooltip plugin with a unique id.\nexport function tooltipFactory<Id extends string, State = any>(id: Id) {\n  const tooltipSpec = $ctx<PluginSpec<State>, TooltipSpecId<Id>>(\n    {},\n    `${id}_TOOLTIP_SPEC`\n  )\n  const tooltipPlugin = $prose((ctx) => {\n    const spec = ctx.get(tooltipSpec.key)\n    return new Plugin({\n      key: new PluginKey(`${id}_TOOLTIP`),\n      ...spec,\n    })\n  })\n  const result = [tooltipSpec, tooltipPlugin] as TooltipPlugin<Id>\n  result.key = tooltipSpec.key\n  result.pluginKey = tooltipPlugin.key\n  tooltipSpec.meta = {\n    package: '@milkdown/plugin-tooltip',\n    displayName: `Ctx<tooltipSpec>|${id}`,\n  }\n  tooltipPlugin.meta = {\n    package: '@milkdown/plugin-tooltip',\n    displayName: `Prose<tooltip>|${id}`,\n  }\n\n  return result\n}\n"],
  "mappings": "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",
  "names": ["throttle"]
}
