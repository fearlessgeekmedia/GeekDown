{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/plugin-history/src/index.ts", "../../../../node_modules/@milkdown/plugin-indent/src/index.ts", "../../../../node_modules/@milkdown/plugin-clipboard/src/index.ts", "../../../../node_modules/@milkdown/plugin-trailing/src/index.ts", "../../../../node_modules/@milkdown/plugin-listener/src/index.ts", "../../../../node_modules/@milkdown/crepe/src/feature/index.ts", "../../../../node_modules/@milkdown/crepe/src/core/slice.ts", "../../../../node_modules/@milkdown/crepe/src/core/crepe.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\nimport { commandsCtx } from '@milkdown/core'\nimport {\n  history as prosemirrorHistory,\n  redo,\n  undo,\n} from '@milkdown/prose/history'\nimport { $command, $ctx, $prose, $useKeymap } from '@milkdown/utils'\n\nfunction withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-history',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n\n/// The milkdown command wrapper of [undo API](https://prosemirror.net/docs/ref/#history.undo) in [prosemirror-history](https://prosemirror.net/docs/ref/#history).\nexport const undoCommand = $command('Undo', () => () => undo)\n\nwithMeta(undoCommand, {\n  displayName: 'Command<undo>',\n})\n\n/// The milkdown command wrapper of [redo API](https://prosemirror.net/docs/ref/#history.redo) in [prosemirror-history](https://prosemirror.net/docs/ref/#history).\nexport const redoCommand = $command('Redo', () => () => redo)\n\nwithMeta(redoCommand, {\n  displayName: 'Command<redo>',\n})\n\n/// The [config](https://prosemirror.net/docs/ref/#history.history%5Econfig) of prosemirror history plugin.\nexport const historyProviderConfig = $ctx<\n  { depth?: number; newGroupDelay?: number },\n  'historyProviderConfig'\n>({}, 'historyProviderConfig')\n\nwithMeta(historyProviderConfig, {\n  displayName: 'Ctx<historyProviderConfig>',\n})\n\n/// The milkdown wrapper of [history API](https://prosemirror.net/docs/ref/#history.history) in [prosemirror-history](https://prosemirror.net/docs/ref/#history).\nexport const historyProviderPlugin = $prose((ctx) =>\n  prosemirrorHistory(ctx.get(historyProviderConfig.key))\n)\n\nwithMeta(historyProviderPlugin, {\n  displayName: 'Ctx<historyProviderPlugin>',\n})\n\n/// The keymap of history plugin, it's `mod-z` for undo and `mod-y`/`shift-mod-z` for redo.\nexport const historyKeymap = $useKeymap('historyKeymap', {\n  Undo: {\n    shortcuts: 'Mod-z',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(undoCommand.key)\n    },\n  },\n  Redo: {\n    shortcuts: ['Mod-y', 'Shift-Mod-z'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(redoCommand.key)\n    },\n  },\n})\n\nwithMeta(historyKeymap.ctx, {\n  displayName: 'KeymapCtx<history>',\n})\nwithMeta(historyKeymap.shortcuts, {\n  displayName: 'Keymap<history>',\n})\n\n/// The milkdown history plugin.\nexport const history: MilkdownPlugin[] = [\n  historyProviderConfig,\n  historyProviderPlugin,\n  historyKeymap,\n  undoCommand,\n  redoCommand,\n].flat()\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport type { Transaction } from '@milkdown/prose/state'\nimport { AllSelection, TextSelection } from '@milkdown/prose/state'\nimport { $ctx, $shortcut } from '@milkdown/utils'\n\n/// Add indent config.\nexport interface IndentConfigOptions {\n  /// The type of indent, `space` or `tab`. By default, it's `space`.\n  type: 'space' | 'tab'\n  /// The size of indent. By default, it's `2`.\n  size: number\n}\n\nfunction updateIndent(\n  tr: Transaction,\n  options: IndentConfigOptions\n): Transaction {\n  const { doc, selection } = tr\n\n  if (!doc || !selection) return tr\n\n  if (\n    !(selection instanceof TextSelection || selection instanceof AllSelection)\n  )\n    return tr\n\n  const { to } = selection\n\n  const text =\n    options.type === 'space' ? Array(options.size).fill(' ').join('') : '\\t'\n\n  return tr.insertText(text, to)\n}\n\n/// A slice contains the indent config.\n/// You can use [IndentConfigOptions](#IndentConfigOptions) to customize the behavior of the plugin.\n///\n/// ```ts\n/// import { indent, indentConfig } from '@milkdown/plugin-indent'\n///\n/// Editor\n///   .make()\n///   .config((ctx) => {\n///     ctx.set(indentConfig.key, {\n///       type: 'space',\n///       size: 4,\n///     })\n///   })\n/// ```\nexport const indentConfig = $ctx<IndentConfigOptions, 'indentConfig'>(\n  { type: 'space', size: 2 },\n  'indentConfig'\n)\n\nindentConfig.meta = {\n  package: '@milkdown/plugin-indent',\n  displayName: 'Ctx<indentConfig>',\n}\n\n/// Add indent shortcut, when users press `Tab`, the plugin will insert indent text.\nexport const indentPlugin = $shortcut((ctx) => ({\n  Tab: (state, dispatch) => {\n    const config = ctx.get(indentConfig.key)\n    const { tr } = state\n    const _tr = updateIndent(tr, config)\n\n    if (_tr.docChanged) {\n      dispatch?.(_tr)\n      return true\n    }\n\n    return false\n  },\n}))\n\nindentPlugin.meta = {\n  package: '@milkdown/plugin-indent',\n  displayName: 'Shortcut<indent>',\n}\n\n/// The plugin of indent.\nexport const indent: MilkdownPlugin[] = [indentConfig, indentPlugin]\n", "import {\n  editorViewOptionsCtx,\n  parserCtx,\n  schemaCtx,\n  serializerCtx,\n} from '@milkdown/core'\nimport { getNodeFromSchema } from '@milkdown/prose'\nimport type { Node, Slice } from '@milkdown/prose/model'\nimport { DOMParser, DOMSerializer } from '@milkdown/prose/model'\nimport { Plugin, PluginKey, TextSelection } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\ntype UnknownRecord = Record<string, unknown>\nfunction isPureText(\n  content: UnknownRecord | UnknownRecord[] | undefined | null\n): boolean {\n  if (!content) return false\n  if (Array.isArray(content)) {\n    if (content.length > 1) return false\n    return isPureText(content[0])\n  }\n\n  const child = content.content\n  if (child) return isPureText(child as UnknownRecord[])\n\n  return content.type === 'text'\n}\n\nfunction isTextOnlySlice(slice: Slice): Node | false {\n  if (slice.content.childCount === 1) {\n    const node = slice.content.firstChild\n    if (node?.type.name === 'text' && node.marks.length === 0) return node\n\n    if (node?.type.name === 'paragraph' && node.childCount === 1) {\n      const _node = node.firstChild\n      if (_node?.type.name === 'text' && _node.marks.length === 0) return _node\n    }\n  }\n\n  return false\n}\n\n/// The prosemirror plugin for clipboard.\nexport const clipboard = $prose((ctx) => {\n  const schema = ctx.get(schemaCtx)\n\n  // Set editable props for https://github.com/Milkdown/milkdown/issues/190\n  ctx.update(editorViewOptionsCtx, (prev) => ({\n    ...prev,\n    editable: prev.editable ?? (() => true),\n  }))\n\n  const key = new PluginKey('MILKDOWN_CLIPBOARD')\n  const plugin = new Plugin({\n    key,\n    props: {\n      handlePaste: (view, event) => {\n        const parser = ctx.get(parserCtx)\n        const editable = view.props.editable?.(view.state)\n        const { clipboardData } = event\n        if (!editable || !clipboardData) return false\n\n        const currentNode = view.state.selection.$from.node()\n        if (currentNode.type.spec.code) return false\n\n        const text = clipboardData.getData('text/plain')\n\n        // if is copied from vscode, try to create a code block\n        const vscodeData = clipboardData.getData('vscode-editor-data')\n        if (vscodeData) {\n          const data = JSON.parse(vscodeData)\n          const language = data?.mode\n          if (text && language) {\n            const { tr } = view.state\n            const codeBlock = getNodeFromSchema('code_block', schema)\n\n            tr.replaceSelectionWith(codeBlock.create({ language }))\n              .setSelection(\n                TextSelection.near(\n                  tr.doc.resolve(Math.max(0, tr.selection.from - 2))\n                )\n              )\n              .insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            view.dispatch(tr)\n            return true\n          }\n        }\n\n        const html = clipboardData.getData('text/html')\n        if (html.length === 0 && text.length === 0) return false\n\n        const domParser = DOMParser.fromSchema(schema)\n        let dom\n        if (html.length === 0) {\n          const slice = parser(text)\n          if (!slice || typeof slice === 'string') return false\n\n          dom = DOMSerializer.fromSchema(schema).serializeFragment(\n            slice.content\n          )\n        } else {\n          const template = document.createElement('template')\n          template.innerHTML = html\n          dom = template.content.cloneNode(true)\n          template.remove()\n        }\n\n        const slice = domParser.parseSlice(dom)\n        const node = isTextOnlySlice(slice)\n        if (node) {\n          view.dispatch(view.state.tr.replaceSelectionWith(node, true))\n          return true\n        }\n\n        view.dispatch(view.state.tr.replaceSelection(slice))\n        return true\n      },\n      clipboardTextSerializer: (slice) => {\n        const serializer = ctx.get(serializerCtx)\n        const isText = isPureText(slice.content.toJSON())\n        if (isText)\n          return (slice.content as unknown as Node).textBetween(\n            0,\n            slice.content.size,\n            '\\n\\n'\n          )\n\n        const doc = schema.topNodeType.createAndFill(undefined, slice.content)\n        if (!doc) return ''\n        const value = serializer(doc)\n        return value\n      },\n    },\n  })\n\n  return plugin\n})\n\nclipboard.meta = {\n  displayName: 'Prose<clipboard>',\n  package: '@milkdown/plugin-clipboard',\n}\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\n\n/// Options for trailing config.\nexport interface TrailingConfigOptions {\n  /// A function that returns a boolean value.\n  /// If it returns `true`, the plugin will append a node at the end of the document.\n  /// By default, it returns `false` if the last node is a heading or a paragraph.\n  shouldAppend: (lastNode: Node | null, state: EditorState) => boolean\n  /// A function that returns a node.\n  /// By default, it returns a paragraph node.\n  getNode: (state: EditorState) => Node\n}\n\n/// A slice contains the trailing config.\n/// You can use [TrailingConfigOptions](#TrailingConfigOptions) to customize the behavior of the plugin.\nexport const trailingConfig = $ctx<TrailingConfigOptions, 'trailingConfig'>(\n  {\n    shouldAppend: (lastNode) => {\n      if (!lastNode) return false\n\n      if (['heading', 'paragraph'].includes(lastNode.type.name)) return false\n\n      return true\n    },\n    getNode: (state) => state.schema.nodes.paragraph!.create(),\n  },\n  'trailingConfig'\n)\n\ntrailingConfig.meta = {\n  package: '@milkdown/plugin-trailing',\n  displayName: 'Ctx<trailingConfig>',\n}\n\n/// The prosemirror plugin for trailing.\nexport const trailingPlugin = $prose((ctx) => {\n  const trailingPluginKey = new PluginKey('MILKDOWN_TRAILING')\n  const { shouldAppend, getNode } = ctx.get(trailingConfig.key)\n  const plugin = new Plugin({\n    key: trailingPluginKey,\n    state: {\n      init: (_, state) => {\n        const lastNode = state.tr.doc.lastChild\n\n        return shouldAppend(lastNode, state)\n      },\n      apply: (tr, value, _, state) => {\n        if (!tr.docChanged) return value\n\n        const lastNode = tr.doc.lastChild\n\n        return shouldAppend(lastNode, state)\n      },\n    },\n    appendTransaction: (_, __, state) => {\n      const { doc, tr } = state\n      const nodeType = getNode?.(state)\n      const shouldInsertNodeAtEnd = plugin.getState(state)\n      const endPosition = doc.content.size\n\n      if (!shouldInsertNodeAtEnd || !nodeType) return\n\n      return tr.insert(endPosition, nodeType)\n    },\n  })\n\n  return plugin\n})\n\ntrailingPlugin.meta = {\n  package: '@milkdown/plugin-trailing',\n  displayName: 'Prose<trailing>',\n}\n\n/// All plugins exported by this package.\nexport const trailing: MilkdownPlugin[] = [trailingConfig, trailingPlugin]\n", "import { createSlice } from '@milkdown/ctx'\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  EditorViewReady,\n  InitReady,\n  SerializerReady,\n  prosePluginsCtx,\n  serializerCtx,\n} from '@milkdown/core'\nimport type { Node as ProseNode } from '@milkdown/prose/model'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport debounce from 'lodash.debounce'\n\n/// The dictionary of subscribers of each event.\nexport interface Subscribers {\n  beforeMount: ((ctx: Ctx) => void)[]\n  mounted: ((ctx: Ctx) => void)[]\n  updated: ((ctx: Ctx, doc: ProseNode, prevDoc: ProseNode) => void)[]\n  markdownUpdated: ((\n    ctx: Ctx,\n    markdown: string,\n    prevMarkdown: string\n  ) => void)[]\n  blur: ((ctx: Ctx) => void)[]\n  focus: ((ctx: Ctx) => void)[]\n  destroy: ((ctx: Ctx) => void)[]\n}\n\n/// The manager of listeners. It provides methods to subscribe to events.\nexport class ListenerManager {\n  private beforeMountedListeners: Array<(ctx: Ctx) => void> = []\n  private mountedListeners: Array<(ctx: Ctx) => void> = []\n  private updatedListeners: Array<\n    (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode) => void\n  > = []\n  private markdownUpdatedListeners: Array<\n    (ctx: Ctx, markdown: string, prevMarkdown: string) => void\n  > = []\n  private blurListeners: Array<(ctx: Ctx) => void> = []\n  private focusListeners: Array<(ctx: Ctx) => void> = []\n  private destroyListeners: Array<(ctx: Ctx) => void> = []\n\n  /// A getter to get all [subscribers](#interface-subscribers). You should not use this method directly.\n  get listeners(): Subscribers {\n    return {\n      beforeMount: this.beforeMountedListeners,\n      mounted: this.mountedListeners,\n      updated: this.updatedListeners,\n      markdownUpdated: this.markdownUpdatedListeners,\n      blur: this.blurListeners,\n      focus: this.focusListeners,\n      destroy: this.destroyListeners,\n    }\n  }\n\n  /// Subscribe to the beforeMount event.\n  /// This event will be triggered before the editor is mounted.\n  beforeMount = (fn: (ctx: Ctx) => void) => {\n    this.beforeMountedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the mounted event.\n  /// This event will be triggered after the editor is mounted.\n  mounted = (fn: (ctx: Ctx) => void) => {\n    this.mountedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the updated event.\n  /// This event will be triggered after the editor state is updated and **the document is changed**.\n  /// The second parameter is the current document and the third parameter is the previous document.\n  updated = (\n    fn: (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void\n  ) => {\n    this.updatedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the markdownUpdated event.\n  /// This event will be triggered after the editor state is updated and **the document is changed**.\n  /// The second parameter is the current markdown and the third parameter is the previous markdown.\n  markdownUpdated(\n    fn: (ctx: Ctx, markdown: string, prevMarkdown: string) => void\n  ) {\n    this.markdownUpdatedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the blur event.\n  /// This event will be triggered when the editor is blurred.\n  blur(fn: (ctx: Ctx) => void) {\n    this.blurListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the focus event.\n  /// This event will be triggered when the editor is focused.\n  focus(fn: (ctx: Ctx) => void) {\n    this.focusListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the destroy event.\n  /// This event will be triggered before the editor is destroyed.\n  destroy(fn: (ctx: Ctx) => void) {\n    this.destroyListeners.push(fn)\n    return this\n  }\n}\n\n/// The ctx key of the listener manager.\n/// You can use `ctx.get(listenerCtx)` to get the [listener manager](#class-listenermanager).\nexport const listenerCtx = createSlice<ListenerManager>(\n  new ListenerManager(),\n  'listener'\n)\n\n/// The plugin key of the listener prosemirror plugin.\nexport const key = new PluginKey('MILKDOWN_LISTENER')\n\n/// The listener plugin.\nexport const listener: MilkdownPlugin = (ctx) => {\n  ctx.inject(listenerCtx, new ListenerManager())\n\n  return async () => {\n    await ctx.wait(InitReady)\n    const listener = ctx.get(listenerCtx)\n    const { listeners } = listener\n\n    listeners.beforeMount.forEach((fn) => fn(ctx))\n\n    await ctx.wait(SerializerReady)\n    const serializer = ctx.get(serializerCtx)\n\n    let prevDoc: ProseNode | null = null\n    let prevMarkdown: string | null = null\n\n    const plugin = new Plugin({\n      key,\n      view: () => {\n        return {\n          destroy: () => {\n            listeners.destroy.forEach((fn) => fn(ctx))\n          },\n        }\n      },\n      props: {\n        handleDOMEvents: {\n          focus: () => {\n            listeners.focus.forEach((fn) => fn(ctx))\n            return false\n          },\n          blur: () => {\n            listeners.blur.forEach((fn) => fn(ctx))\n            return false\n          },\n        },\n      },\n      state: {\n        init: (_, instance) => {\n          prevDoc = instance.doc\n          prevMarkdown = serializer(instance.doc)\n        },\n        apply: (tr) => {\n          if (!tr.docChanged || tr.getMeta('addToHistory') === false) return\n\n          const handler = debounce(() => {\n            const { doc } = tr\n            if (listeners.updated.length > 0 && prevDoc && !prevDoc.eq(doc)) {\n              listeners.updated.forEach((fn) => {\n                fn(ctx, doc, prevDoc!)\n              })\n            }\n\n            if (\n              listeners.markdownUpdated.length > 0 &&\n              prevDoc &&\n              !prevDoc.eq(doc)\n            ) {\n              const markdown = serializer(doc)\n              listeners.markdownUpdated.forEach((fn) => {\n                fn(ctx, markdown, prevMarkdown!)\n              })\n              prevMarkdown = markdown\n            }\n\n            prevDoc = doc\n          }, 200)\n\n          return handler()\n        },\n      },\n    })\n    ctx.update(prosePluginsCtx, (x) => x.concat(plugin))\n\n    await ctx.wait(EditorViewReady)\n    listeners.mounted.forEach((fn) => fn(ctx))\n  }\n}\n\nlistener.meta = {\n  package: '@milkdown/plugin-listener',\n  displayName: 'Listener',\n}\n", "import type { Editor } from '@milkdown/kit/core'\nimport type { PlaceHolderFeatureConfig } from './placeholder'\nimport type { CodeMirrorFeatureConfig } from './code-mirror'\nimport type { BlockEditFeatureConfig } from './block-edit'\nimport type { CursorFeatureConfig } from './cursor'\nimport type { ImageBlockFeatureConfig } from './image-block'\nimport type { LinkTooltipFeatureConfig } from './link-tooltip'\nimport type { ListItemFeatureConfig } from './list-item'\nimport type { ToolbarFeatureConfig } from './toolbar'\nimport type { TableFeatureConfig } from './table'\nimport type { LatexFeatureConfig } from './latex'\n\nexport enum CrepeFeature {\n  CodeMirror = 'code-mirror',\n  ListItem = 'list-item',\n  LinkTooltip = 'link-tooltip',\n  Cursor = 'cursor',\n  ImageBlock = 'image-block',\n  BlockEdit = 'block-edit',\n  Toolbar = 'toolbar',\n  Placeholder = 'placeholder',\n  Table = 'table',\n  Latex = 'latex',\n}\n\nexport interface CrepeFeatureConfig {\n  [CrepeFeature.Cursor]?: CursorFeatureConfig\n  [CrepeFeature.ListItem]?: ListItemFeatureConfig\n  [CrepeFeature.LinkTooltip]?: LinkTooltipFeatureConfig\n  [CrepeFeature.ImageBlock]?: ImageBlockFeatureConfig\n  [CrepeFeature.BlockEdit]?: BlockEditFeatureConfig\n  [CrepeFeature.Placeholder]?: PlaceHolderFeatureConfig\n  [CrepeFeature.Toolbar]?: ToolbarFeatureConfig\n  [CrepeFeature.CodeMirror]?: CodeMirrorFeatureConfig\n  [CrepeFeature.Table]?: TableFeatureConfig\n  [CrepeFeature.Latex]?: LatexFeatureConfig\n}\n\nexport const defaultFeatures: Record<CrepeFeature, boolean> = {\n  [CrepeFeature.Cursor]: true,\n  [CrepeFeature.ListItem]: true,\n  [CrepeFeature.LinkTooltip]: true,\n  [CrepeFeature.ImageBlock]: true,\n  [CrepeFeature.BlockEdit]: true,\n  [CrepeFeature.Placeholder]: true,\n  [CrepeFeature.Toolbar]: true,\n  [CrepeFeature.CodeMirror]: true,\n  [CrepeFeature.Table]: true,\n  [CrepeFeature.Latex]: true,\n}\n\nexport async function loadFeature(\n  feature: CrepeFeature,\n  editor: Editor,\n  config?: never\n) {\n  switch (feature) {\n    case CrepeFeature.CodeMirror: {\n      const { defineFeature } = await import('./code-mirror')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.ListItem: {\n      const { defineFeature } = await import('./list-item')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.LinkTooltip: {\n      const { defineFeature } = await import('./link-tooltip')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.ImageBlock: {\n      const { defineFeature } = await import('./image-block')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Cursor: {\n      const { defineFeature } = await import('./cursor')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.BlockEdit: {\n      const { defineFeature } = await import('./block-edit')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Placeholder: {\n      const { defineFeature } = await import('./placeholder')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Toolbar: {\n      const { defineFeature } = await import('./toolbar')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Table: {\n      const { defineFeature } = await import('./table')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Latex: {\n      const { defineFeature } = await import('./latex')\n      return defineFeature(editor, config)\n    }\n  }\n}\n", "import type { Ctx } from '@milkdown/kit/ctx'\nimport { createSlice } from '@milkdown/kit/ctx'\nimport type { CrepeFeature } from '../feature'\nimport type { Crepe } from './crepe'\n\nexport const FeaturesCtx = createSlice([] as CrepeFeature[], 'FeaturesCtx')\n\nexport const crepeCtx = createSlice({} as Crepe, 'CrepeCtx')\n\nexport function configureFeatures(features: CrepeFeature[]) {\n  return (ctx: Ctx) => {\n    ctx.inject(FeaturesCtx, features)\n  }\n}\n", "import type { DefaultValue } from '@milkdown/kit/core'\nimport {\n  Editor,\n  EditorStatus,\n  defaultValueCtx,\n  editorViewOptionsCtx,\n  rootCtx,\n} from '@milkdown/kit/core'\n\nimport { commonmark } from '@milkdown/kit/preset/commonmark'\nimport { gfm } from '@milkdown/kit/preset/gfm'\nimport { history } from '@milkdown/kit/plugin/history'\nimport { indent, indentConfig } from '@milkdown/kit/plugin/indent'\nimport { getMarkdown } from '@milkdown/kit/utils'\nimport { clipboard } from '@milkdown/kit/plugin/clipboard'\nimport { trailing } from '@milkdown/kit/plugin/trailing'\n\nimport type { CrepeFeatureConfig } from '../feature'\nimport { CrepeFeature, defaultFeatures, loadFeature } from '../feature'\nimport { configureFeatures, crepeCtx } from './slice'\nimport type { ListenerManager } from '@milkdown/kit/plugin/listener'\nimport { listener, listenerCtx } from '@milkdown/kit/plugin/listener'\n\nexport interface CrepeConfig {\n  features?: Partial<Record<CrepeFeature, boolean>>\n  featureConfigs?: CrepeFeatureConfig\n  root?: Node | string | null\n  defaultValue?: DefaultValue\n}\n\nexport class Crepe {\n  static Feature = CrepeFeature\n  readonly #editor: Editor\n  readonly #initPromise: Promise<unknown>\n  readonly #rootElement: Node\n  #editable = true\n\n  constructor({\n    root,\n    features = {},\n    featureConfigs = {},\n    defaultValue = '',\n  }: CrepeConfig) {\n    const enabledFeatures = Object.entries({\n      ...defaultFeatures,\n      ...features,\n    })\n      .filter(([, enabled]) => enabled)\n      .map(([feature]) => feature as CrepeFeature)\n\n    this.#rootElement =\n      (typeof root === 'string' ? document.querySelector(root) : root) ??\n      document.body\n    this.#editor = Editor.make()\n      .config((ctx) => {\n        ctx.inject(crepeCtx, this)\n      })\n      .config(configureFeatures(enabledFeatures))\n      .config((ctx) => {\n        ctx.set(rootCtx, this.#rootElement)\n        ctx.set(defaultValueCtx, defaultValue)\n        ctx.set(editorViewOptionsCtx, {\n          editable: () => this.#editable,\n        })\n        ctx.update(indentConfig.key, (value) => ({\n          ...value,\n          size: 4,\n        }))\n      })\n      .use(commonmark)\n      .use(listener)\n      .use(history)\n      .use(indent)\n      .use(trailing)\n      .use(clipboard)\n      .use(gfm)\n\n    const promiseList: Promise<unknown>[] = []\n\n    enabledFeatures.forEach((feature) => {\n      const config = (featureConfigs as Partial<Record<CrepeFeature, never>>)[\n        feature\n      ]\n      promiseList.push(loadFeature(feature, this.#editor, config))\n    })\n\n    this.#initPromise = Promise.all(promiseList)\n  }\n\n  async create() {\n    await this.#initPromise\n    return this.#editor.create()\n  }\n\n  async destroy() {\n    await this.#initPromise\n    return this.#editor.destroy()\n  }\n\n  get editor(): Editor {\n    return this.#editor\n  }\n\n  setReadonly(value: boolean) {\n    this.#editable = !value\n    return this\n  }\n\n  getMarkdown() {\n    return this.#editor.action(getMarkdown())\n  }\n\n  on(fn: (api: ListenerManager) => void) {\n    if (this.#editor.status !== EditorStatus.Created) {\n      this.#editor.config((ctx) => {\n        const listener = ctx.get(listenerCtx)\n        fn(listener)\n      })\n      return this\n    }\n    this.#editor.action((ctx) => {\n      const listener = ctx.get(listenerCtx)\n      fn(listener)\n    })\n    return this\n  }\n}\n"],
  "mappings": "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",
  "names": ["prosemirrorHistory", "history", "key", "slice", "listener", "debounce", "CrepeFeature", "history", "listener"]
}
