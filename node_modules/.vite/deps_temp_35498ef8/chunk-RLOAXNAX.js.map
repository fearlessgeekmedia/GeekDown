{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/components/src/__internal__/meta.ts", "../../../../node_modules/@milkdown/components/src/code-block/config.ts", "../../../../node_modules/@milkdown/components/src/__internal__/helper.ts", "../../../../node_modules/@milkdown/components/src/code-block/view/node-view.ts", "../../../../node_modules/@milkdown/components/src/code-block/view/loader.ts", "../../../../node_modules/@milkdown/components/src/code-block/view/component.ts", "../../../../node_modules/@milkdown/components/src/code-block/view/index.ts", "../../../../node_modules/@milkdown/components/src/code-block/index.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "import { $ctx } from '@milkdown/utils'\nimport type { Extension } from '@codemirror/state'\nimport type { LanguageDescription } from '@codemirror/language'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface CodeBlockConfig {\n  extensions: Extension[]\n  languages: LanguageDescription[]\n  expandIcon: () => ReturnType<typeof html> | string\n  searchIcon: () => ReturnType<typeof html> | string\n  clearSearchIcon: () => ReturnType<typeof html> | string\n  searchPlaceholder: string\n  noResultText: string\n  renderLanguage: (\n    language: string,\n    selected: boolean\n  ) => ReturnType<typeof html>\n  renderPreview: (\n    language: string,\n    content: string\n  ) => null | string | HTMLElement\n  previewToggleButton: (previewOnlyMode: boolean) => ReturnType<typeof html>\n  previewLabel: () => ReturnType<typeof html>\n}\n\nexport const defaultConfig: CodeBlockConfig = {\n  extensions: [],\n  languages: [],\n  expandIcon: () => '⬇',\n  searchIcon: () => '🔍',\n  clearSearchIcon: () => '⌫',\n  searchPlaceholder: 'Search language',\n  noResultText: 'No result',\n  renderLanguage: (language) => html`${language}`,\n  renderPreview: () => null,\n  previewToggleButton: (previewOnlyMode) => (previewOnlyMode ? 'Edit' : 'Hide'),\n  previewLabel: () => 'Preview',\n}\n\nexport const codeBlockConfig = $ctx(defaultConfig, 'codeBlockConfigCtx')\n\nwithMeta(codeBlockConfig, {\n  displayName: 'Config<code-block>',\n  group: 'CodeBlock',\n})\n", "export function defIfNotExists(\n  tagName: string,\n  element: CustomElementConstructor\n) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element) return\n\n  // eslint-disable-next-line no-console\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import type { EditorView, NodeView } from '@milkdown/prose/view'\nimport {\n  EditorView as CodeMirror,\n  type KeyBinding,\n  type ViewUpdate,\n  keymap as cmKeymap,\n} from '@codemirror/view'\nimport type { Node } from '@milkdown/prose/model'\nimport { redo, undo } from '@milkdown/prose/history'\nimport { Compartment, EditorState } from '@codemirror/state'\nimport type { Line, SelectionRange } from '@codemirror/state'\nimport { exitCode } from '@milkdown/prose/commands'\nimport { TextSelection } from '@milkdown/prose/state'\n\nimport type { CodeBlockConfig } from '../config'\nimport type { CodeComponentProps } from './component'\nimport type { LanguageLoader } from './loader'\n\nexport class CodeMirrorBlock implements NodeView {\n  dom: HTMLElement & CodeComponentProps\n  cm: CodeMirror\n\n  private updating = false\n  private languageName: string = ''\n\n  private readonly languageConf: Compartment\n  private readonly readOnlyConf: Compartment\n\n  constructor(\n    public node: Node,\n    public view: EditorView,\n    public getPos: () => number | undefined,\n    public loader: LanguageLoader,\n    public config: CodeBlockConfig\n  ) {\n    this.languageConf = new Compartment()\n    this.readOnlyConf = new Compartment()\n\n    this.cm = new CodeMirror({\n      doc: this.node.textContent,\n      root: this.view.root,\n      extensions: [\n        this.readOnlyConf.of(EditorState.readOnly.of(!this.view.editable)),\n        cmKeymap.of(this.codeMirrorKeymap()),\n        this.languageConf.of([]),\n        ...config.extensions,\n        CodeMirror.updateListener.of(this.forwardUpdate),\n      ],\n    })\n\n    this.dom = this.createDom()\n\n    this.updateLanguage()\n  }\n\n  private forwardUpdate = (update: ViewUpdate) => {\n    if (this.updating || !this.cm.hasFocus) return\n    let offset = (this.getPos() ?? 0) + 1\n    const { main } = update.state.selection\n    const selFrom = offset + main.from\n    const selTo = offset + main.to\n    const pmSel = this.view.state.selection\n    if (update.docChanged || pmSel.from !== selFrom || pmSel.to !== selTo) {\n      const tr = this.view.state.tr\n      update.changes.iterChanges((fromA, toA, fromB, toB, text) => {\n        if (text.length)\n          tr.replaceWith(\n            offset + fromA,\n            offset + toA,\n            this.view.state.schema.text(text.toString())\n          )\n        else tr.delete(offset + fromA, offset + toA)\n        offset += toB - fromB - (toA - fromA)\n      })\n      tr.setSelection(TextSelection.create(tr.doc, selFrom, selTo))\n      this.view.dispatch(tr)\n    }\n  }\n\n  private createDom() {\n    const dom = document.createElement('milkdown-code-block') as HTMLElement &\n      CodeComponentProps\n    dom.codemirror = this.cm\n    dom.getAllLanguages = this.getAllLanguages\n    dom.setLanguage = this.setLanguage\n    dom.isEditorReadonly = () => !this.view.editable\n    dom.text = this.node.textContent\n    const {\n      languages: _languages,\n      extensions: _extensions,\n      ...viewConfig\n    } = this.config\n    dom.config = viewConfig\n    return dom\n  }\n\n  private updateLanguage() {\n    const languageName = this.node.attrs.language\n\n    if (languageName === this.languageName) return\n\n    this.dom.language = languageName\n    const language = this.loader.load(languageName ?? '')\n\n    language.then((lang) => {\n      if (lang) {\n        this.cm.dispatch({\n          effects: this.languageConf.reconfigure(lang),\n        })\n        this.languageName = languageName\n      }\n    })\n  }\n\n  private codeMirrorKeymap = (): KeyBinding[] => {\n    const view = this.view\n    return [\n      { key: 'ArrowUp', run: () => this.maybeEscape('line', -1) },\n      { key: 'ArrowLeft', run: () => this.maybeEscape('char', -1) },\n      { key: 'ArrowDown', run: () => this.maybeEscape('line', 1) },\n      { key: 'ArrowRight', run: () => this.maybeEscape('char', 1) },\n      {\n        key: 'Mod-Enter',\n        run: () => {\n          if (!exitCode(view.state, view.dispatch)) return false\n\n          view.focus()\n          return true\n        },\n      },\n      { key: 'Mod-z', run: () => undo(view.state, view.dispatch) },\n      { key: 'Shift-Mod-z', run: () => redo(view.state, view.dispatch) },\n      { key: 'Mod-y', run: () => redo(view.state, view.dispatch) },\n      {\n        key: 'Backspace',\n        run: () => {\n          const ranges = this.cm.state.selection.ranges\n\n          if (ranges.length > 1) return false\n\n          const selection = ranges[0]\n\n          if (selection && (!selection.empty || selection.anchor > 0))\n            return false\n\n          if (this.cm.state.doc.lines >= 2) return false\n\n          const state = this.view.state\n          const pos = this.getPos() ?? 0\n          const tr = state.tr.replaceWith(\n            pos,\n            pos + this.node.nodeSize,\n            state.schema.nodes.paragraph!.createChecked({}, this.node.content)\n          )\n\n          tr.setSelection(TextSelection.near(tr.doc.resolve(pos)))\n\n          this.view.dispatch(tr)\n          this.view.focus()\n          return true\n        },\n      },\n    ]\n  }\n\n  private maybeEscape = (unit: 'line' | 'char', dir: -1 | 1): boolean => {\n    const { state } = this.cm\n    let main: SelectionRange | Line = state.selection.main\n    if (!main.empty) return false\n    if (unit === 'line') main = state.doc.lineAt(main.head)\n    if (dir < 0 ? main.from > 0 : main.to < state.doc.length) return false\n\n    const targetPos = (this.getPos() ?? 0) + (dir < 0 ? 0 : this.node.nodeSize)\n    const selection = TextSelection.near(\n      this.view.state.doc.resolve(targetPos),\n      dir\n    )\n    const tr = this.view.state.tr.setSelection(selection).scrollIntoView()\n    this.view.dispatch(tr)\n    this.view.focus()\n    return true\n  }\n\n  setSelection(anchor: number, head: number) {\n    if (!this.cm.dom.isConnected) return\n\n    this.cm.focus()\n    this.updating = true\n    this.cm.dispatch({ selection: { anchor, head } })\n    this.updating = false\n  }\n\n  update(node: Node) {\n    if (node.type !== this.node.type) return false\n\n    if (this.updating) return true\n\n    this.node = node\n    this.dom.text = node.textContent\n    this.updateLanguage()\n    if (this.view.editable === this.cm.state.readOnly) {\n      this.cm.dispatch({\n        effects: this.readOnlyConf.reconfigure(\n          EditorState.readOnly.of(!this.view.editable)\n        ),\n      })\n    }\n\n    const change = computeChange(this.cm.state.doc.toString(), node.textContent)\n    if (change) {\n      this.updating = true\n      this.cm.dispatch({\n        changes: { from: change.from, to: change.to, insert: change.text },\n      })\n      this.updating = false\n    }\n    return true\n  }\n\n  selectNode() {\n    this.dom.selected = true\n    this.cm.focus()\n  }\n\n  deselectNode() {\n    this.dom.selected = false\n  }\n\n  stopEvent() {\n    return true\n  }\n\n  destroy() {\n    this.cm.destroy()\n  }\n\n  setLanguage = (language: string) => {\n    this.view.dispatch(\n      this.view.state.tr.setNodeAttribute(\n        this.getPos() ?? 0,\n        'language',\n        language\n      )\n    )\n  }\n\n  getAllLanguages = () => {\n    return this.loader.getAll()\n  }\n}\n\nfunction computeChange(\n  oldVal: string,\n  newVal: string\n): { from: number; to: number; text: string } | null {\n  if (oldVal === newVal) return null\n\n  let start = 0\n  let oldEnd = oldVal.length\n  let newEnd = newVal.length\n\n  while (\n    start < oldEnd &&\n    oldVal.charCodeAt(start) === newVal.charCodeAt(start)\n  )\n    ++start\n\n  while (\n    oldEnd > start &&\n    newEnd > start &&\n    oldVal.charCodeAt(oldEnd - 1) === newVal.charCodeAt(newEnd - 1)\n  ) {\n    oldEnd--\n    newEnd--\n  }\n\n  return { from: start, to: oldEnd, text: newVal.slice(start, newEnd) }\n}\n", "import type { LanguageDescription, LanguageSupport } from '@codemirror/language'\n\nexport interface LanguageInfo {\n  name: string\n  alias: readonly string[]\n}\n\nexport class LanguageLoader {\n  private readonly map: Record<string, LanguageDescription>\n\n  constructor(private languages: LanguageDescription[]) {\n    this.map = {}\n\n    languages.forEach((language) => {\n      language.alias.forEach((alias) => {\n        this.map[alias] = language\n      })\n    })\n  }\n\n  getAll(): LanguageInfo[] {\n    return this.languages.map((language): LanguageInfo => {\n      return {\n        name: language.name,\n        alias: language.alias,\n      }\n    })\n  }\n\n  load(languageName: string): Promise<LanguageSupport | undefined> {\n    const languageMap = this.map\n    const language = languageMap[languageName.toLowerCase()]\n\n    if (!language) return Promise.resolve(undefined)\n\n    if (language.support) return Promise.resolve(language.support)\n\n    return language.load()\n  }\n}\n", "import type { EditorView as CodeMirror } from '@codemirror/view'\nimport type { Component } from 'atomico'\nimport {\n  c,\n  h,\n  html,\n  useEffect,\n  useHost,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'atomico'\nimport { computePosition } from '@floating-ui/dom'\nimport clsx from 'clsx'\nimport type { CodeBlockConfig } from '../config'\nimport type { LanguageInfo } from './loader'\n\nexport interface CodeComponentProps {\n  text: string\n  selected: boolean\n  codemirror: CodeMirror\n  language: string\n  getAllLanguages: () => Array<LanguageInfo>\n  setLanguage: (language: string) => void\n  isEditorReadonly: () => boolean\n  config: Omit<CodeBlockConfig, 'languages' | 'extensions'>\n}\n\nexport const codeComponent: Component<CodeComponentProps> = ({\n  selected = false,\n  codemirror,\n  getAllLanguages,\n  setLanguage,\n  language,\n  config,\n  isEditorReadonly,\n  text,\n}) => {\n  const host = useHost()\n  const triggerRef = useRef<HTMLButtonElement>()\n  const pickerRef = useRef<HTMLDivElement>()\n  const searchRef = useRef<HTMLInputElement>()\n  const previewRef = useRef<HTMLDivElement>()\n  const [filter, setFilter] = useState('')\n  const [showPicker, setShowPicker] = useState(false)\n  const [previewOnlyMode, setPreviewOnlyMode] = useState(false)\n\n  const root = useMemo(() => host.current.getRootNode() as HTMLElement, [host])\n\n  useEffect(() => {\n    const lang = getAllLanguages?.()?.find((languageInfo) =>\n      languageInfo.alias.some(\n        (alias) => alias.toLowerCase() === language?.toLowerCase()\n      )\n    )\n\n    if (lang && lang.name !== language) setLanguage?.(lang.name)\n  }, [language])\n\n  useEffect(() => {\n    setShowPicker(false)\n  }, [language])\n\n  useEffect(() => {\n    const clickHandler = (e: MouseEvent) => {\n      const target = e.target as HTMLElement\n\n      if (triggerRef.current && triggerRef.current.contains(target)) return\n\n      const picker = pickerRef.current\n      if (!picker) return\n\n      if (picker.dataset.expanded !== 'true') return\n\n      if (!picker.contains(target)) setShowPicker(false)\n    }\n\n    root.addEventListener('click', clickHandler)\n\n    return () => {\n      root.removeEventListener('click', clickHandler)\n    }\n  }, [])\n\n  useLayoutEffect(() => {\n    setFilter('')\n    const picker = triggerRef.current\n    const languageList = pickerRef.current\n    if (!picker || !languageList) return\n\n    computePosition(picker, languageList, {\n      placement: 'bottom-start',\n    }).then(({ x, y }) => {\n      Object.assign(languageList.style, {\n        left: `${x}px`,\n        top: `${y}px`,\n      })\n    })\n  }, [showPicker])\n\n  const languages = useMemo(() => {\n    if (!showPicker) return []\n\n    const all = getAllLanguages?.() ?? []\n\n    const selected = all.find(\n      (languageInfo) =>\n        languageInfo.name.toLowerCase() === language?.toLowerCase()\n    )\n\n    const filtered = all.filter((languageInfo) => {\n      return (\n        (languageInfo.name.toLowerCase().includes(filter.toLowerCase()) ||\n          languageInfo.alias.some((alias) =>\n            alias.toLowerCase().includes(filter.toLowerCase())\n          )) &&\n        languageInfo !== selected\n      )\n    })\n\n    if (filtered.length === 0) return []\n\n    if (!selected) return filtered\n\n    return [selected, ...filtered]\n  }, [filter, showPicker, language])\n\n  const changeFilter = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    setFilter(target.value)\n  }\n\n  const onTogglePicker = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (isEditorReadonly?.()) return\n\n    setShowPicker((show) => {\n      if (!show) {\n        setTimeout(() => searchRef.current?.focus(), 0)\n      }\n      return !show\n    })\n  }\n\n  const onClear = (e: MouseEvent) => {\n    e.preventDefault()\n    setFilter('')\n  }\n\n  const onSearchKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') setFilter('')\n  }\n\n  const onListKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      const active = document.activeElement\n      if (active instanceof HTMLElement && active.dataset.language)\n        setLanguage?.(active.dataset.language)\n    }\n  }\n\n  const renderedLanguageList = useMemo(() => {\n    if (!languages?.length)\n      return html`<li class=\"language-list-item no-result\">\n        ${config?.noResultText}\n      </li>`\n\n    return languages.map(\n      (languageInfo) =>\n        html`<li\n          role=\"listitem\"\n          tabindex=\"0\"\n          class=\"language-list-item\"\n          aria-selected=${languageInfo.name.toLowerCase() ===\n          language?.toLowerCase()}\n          data-language=${languageInfo.name}\n          onclick=${() => setLanguage?.(languageInfo.name)}\n        >\n          ${config?.renderLanguage?.(\n            languageInfo.name,\n            languageInfo.name.toLowerCase() === language?.toLowerCase()\n          )}\n        </li>`\n    )\n  }, [languages])\n\n  const preview = useMemo(() => {\n    const preview = config?.renderPreview?.(language ?? '', text ?? '')\n    return preview\n  }, [language, text])\n\n  useEffect(() => {\n    if (!previewRef.current) {\n      return\n    }\n\n    while (previewRef.current.firstChild) {\n      previewRef.current.removeChild(previewRef.current.firstChild)\n    }\n    if (typeof preview === 'string') {\n      previewRef.current.innerHTML = preview\n    } else if (preview instanceof HTMLElement) {\n      previewRef.current.appendChild(preview)\n    }\n  }, [preview])\n\n  return html`<host class=${clsx(selected && 'selected')}>\n    <div class=\"tools\">\n      <button\n        type=\"button\"\n        ref=${triggerRef}\n        class=\"language-button\"\n        onpointerdown=${onTogglePicker}\n        data-expanded=${showPicker}\n      >\n        ${language || 'Text'}\n        <div class=\"expand-icon\">${config?.expandIcon?.()}</div>\n      </button>\n      <div\n        ref=${pickerRef}\n        data-expanded=${showPicker}\n        class=${clsx('language-picker', showPicker && 'show')}\n      >\n        <div class=\"list-wrapper\">\n          <div class=\"search-box\">\n            <div class=\"search-icon\">${config?.searchIcon?.()}</div>\n            <input\n              ref=${searchRef}\n              class=\"search-input\"\n              placeholder=${config?.searchPlaceholder}\n              value=${filter}\n              oninput=${changeFilter}\n              onkeydown=${onSearchKeydown}\n            />\n            <div\n              class=${clsx('clear-icon', filter.length === 0 && 'hidden')}\n              onmousedown=${onClear}\n            >\n              ${config?.clearSearchIcon?.()}\n            </div>\n          </div>\n          <ul class=\"language-list\" role=\"listbox\" onkeydown=${onListKeydown}>\n            ${renderedLanguageList}\n          </ul>\n        </div>\n      </div>\n      <button\n        class=${clsx('preview-toggle-button', !preview && 'hidden')}\n        onclick=${() => setPreviewOnlyMode(!previewOnlyMode)}\n      >\n        ${config?.previewToggleButton?.(previewOnlyMode)}\n      </button>\n    </div>\n    <div\n      class=${clsx('codemirror-host', preview && previewOnlyMode && 'hidden')}\n    >\n      ${h(codemirror?.dom, {})}\n    </div>\n    <div class=${clsx('preview-panel', !preview && 'hidden')}>\n      <div class=${clsx('preview-divider', previewOnlyMode && 'hidden')}></div>\n      <div class=${clsx('preview-label', previewOnlyMode && 'hidden')}>\n        ${config?.previewLabel?.()}\n      </div>\n      <div ref=${previewRef} class=\"preview\"></div>\n    </div>\n  </host>`\n}\n\ncodeComponent.props = {\n  selected: Boolean,\n  codemirror: Object,\n  language: String,\n  getAllLanguages: Function,\n  setLanguage: Function,\n  isEditorReadonly: Function,\n  config: Object,\n  text: String,\n}\n\nexport const CodeElement = c(codeComponent)\n", "import { $view } from '@milkdown/utils'\nimport { codeBlockSchema } from '@milkdown/preset-commonmark'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { codeBlockConfig } from '../config'\nimport { withMeta } from '../../__internal__/meta'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport { CodeMirrorBlock } from './node-view'\nimport { LanguageLoader } from './loader'\nimport { CodeElement } from './component'\n\ndefIfNotExists('milkdown-code-block', CodeElement)\nexport const codeBlockView = $view(\n  codeBlockSchema.node,\n  (ctx): NodeViewConstructor => {\n    const config = ctx.get(codeBlockConfig.key)\n    const languageLoader = new LanguageLoader(config.languages)\n    return (node, view, getPos) =>\n      new CodeMirrorBlock(node, view, getPos, languageLoader, config)\n  }\n)\n\nwithMeta(codeBlockView, {\n  displayName: 'NodeView<code-block>',\n  group: 'CodeBlock',\n})\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { codeBlockView } from './view'\nimport { codeBlockConfig } from './config'\n\nexport * from './config'\nexport * from './view'\n\nexport const codeBlockComponent: MilkdownPlugin[] = [\n  codeBlockView,\n  codeBlockConfig,\n]\n"],
  "mappings": "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",
  "names": ["view", "CodeMirror", "cmKeymap", "_a", "selected", "preview"]
}
