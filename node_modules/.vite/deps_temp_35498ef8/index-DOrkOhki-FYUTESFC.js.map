{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/crepe/src/feature/placeholder/index.ts"],
  "sourcesContent": ["import { $ctx, $prose } from '@milkdown/kit/utils'\nimport type { EditorState } from '@milkdown/kit/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/kit/prose/state'\nimport type { Node } from '@milkdown/kit/prose/model'\nimport { Decoration, DecorationSet } from '@milkdown/kit/prose/view'\nimport { findParent } from '@milkdown/kit/prose'\nimport type { DefineFeature } from '../shared'\nimport { isInCodeBlock, isInList } from '../../utils'\n\nfunction isDocEmpty(doc: Node) {\n  return doc.childCount <= 1 && !doc.firstChild?.content.size\n}\n\nfunction createPlaceholderDecoration(\n  state: EditorState,\n  placeholderText: string\n): Decoration | null {\n  const { selection } = state\n  if (!selection.empty) return null\n\n  const $pos = selection.$anchor\n  const node = $pos.parent\n  if (node.content.size > 0) return null\n\n  const inTable = findParent((node) => node.type.name === 'table')($pos)\n  if (inTable) return null\n\n  const before = $pos.before()\n\n  return Decoration.node(before, before + node.nodeSize, {\n    class: 'crepe-placeholder',\n    'data-placeholder': placeholderText,\n  })\n}\n\ninterface PlaceholderConfig {\n  text: string\n  mode: 'doc' | 'block'\n}\n\nexport type PlaceHolderFeatureConfig = Partial<PlaceholderConfig>\n\nexport const placeholderConfig = $ctx(\n  {\n    text: 'Please enter...',\n    mode: 'block',\n  } as PlaceholderConfig,\n  'placeholderConfigCtx'\n)\n\nexport const placeholderPlugin = $prose((ctx) => {\n  return new Plugin({\n    key: new PluginKey('CREPE_PLACEHOLDER'),\n    props: {\n      decorations: (state) => {\n        const config = ctx.get(placeholderConfig.key)\n        if (config.mode === 'doc' && !isDocEmpty(state.doc)) return null\n\n        if (isInCodeBlock(state.selection) || isInList(state.selection))\n          return null\n\n        const placeholderText = config.text ?? 'Please enter...'\n        const deco = createPlaceholderDecoration(state, placeholderText)\n        if (!deco) return null\n\n        return DecorationSet.create(state.doc, [deco])\n      },\n    },\n  })\n})\n\nexport const defineFeature: DefineFeature<PlaceHolderFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => {\n      if (config) {\n        ctx.update(placeholderConfig.key, (prev) => {\n          return {\n            ...prev,\n            ...config,\n          }\n        })\n      }\n    })\n    .use(placeholderPlugin)\n    .use(placeholderConfig)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AASA,SAAS,WAAW,KAAW;AAT/B,MAAA;AAUE,SAAO,IAAI,cAAc,KAAK,GAAC,KAAI,IAAA,eAAJ,OAAA,SAAA,GAAgB,QAAQ;AACzD;AAEA,SAAS,4BACP,OACA,iBACmB;AACb,QAAA,EAAE,UAAA,IAAc;AAClB,MAAA,CAAC,UAAU;AAAc,WAAA;AAE7B,QAAM,OAAO,UAAU;AACvB,QAAM,OAAO,KAAK;AAClB,MAAI,KAAK,QAAQ,OAAO;AAAU,WAAA;AAE5B,QAAA,UAAU,WAAW,CAACA,UAASA,MAAK,KAAK,SAAS,OAAO,EAAE,IAAI;AACrE,MAAI;AAAgB,WAAA;AAEd,QAAA,SAAS,KAAK,OAAO;AAE3B,SAAO,WAAW,KAAK,QAAQ,SAAS,KAAK,UAAU;IACrD,OAAO;IACP,oBAAoB;EAAA,CACrB;AACH;AASO,IAAM,oBAAoB;EAC/B;IACE,MAAM;IACN,MAAM;EAAA;EAER;AACF;AAEa,IAAA,oBAAoB,OAAO,CAAC,QAAQ;AAC/C,SAAO,IAAI,OAAO;IAChB,KAAK,IAAI,UAAU,mBAAmB;IACtC,OAAO;MACL,aAAa,CAAC,UAAU;AAtD9B,YAAA;AAuDQ,cAAM,SAAS,IAAI,IAAI,kBAAkB,GAAG;AACxC,YAAA,OAAO,SAAS,SAAS,CAAC,WAAW,MAAM,GAAG;AAAU,iBAAA;AAE5D,YAAI,cAAc,MAAM,SAAS,KAAK,SAAS,MAAM,SAAS;AACrD,iBAAA;AAEH,cAAA,mBAAkB,KAAO,OAAA,SAAP,OAAe,KAAA;AACjC,cAAA,OAAO,4BAA4B,OAAO,eAAe;AAC3D,YAAA,CAAC;AAAa,iBAAA;AAElB,eAAO,cAAc,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC;MAAA;IAC/C;EACF,CACD;AACH,CAAC;AAEY,IAAA,gBAAyD,CACpE,QACA,WACG;AAEA,SAAA,OAAO,CAAC,QAAQ;AACf,QAAI,QAAQ;AACV,UAAI,OAAO,kBAAkB,KAAK,CAAC,SAAS;AACnC,eAAA;UACL,GAAG;UACH,GAAG;QAAA;MACL,CACD;IAAA;EACH,CACD,EACA,IAAI,iBAAiB,EACrB,IAAI,iBAAiB;AAC1B;",
  "names": ["node"]
}
