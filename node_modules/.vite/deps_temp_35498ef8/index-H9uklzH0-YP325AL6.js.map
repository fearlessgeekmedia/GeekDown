{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/crepe/src/feature/toolbar/component.ts", "../../../../node_modules/@milkdown/crepe/src/feature/toolbar/index.ts"],
  "sourcesContent": ["import type { Component } from 'atomico'\nimport { c, html, useEffect, useUpdate } from 'atomico'\nimport type { Ctx } from '@milkdown/kit/ctx'\nimport { commandsCtx, editorViewCtx } from '@milkdown/kit/core'\nimport {\n  emphasisSchema,\n  inlineCodeSchema,\n  linkSchema,\n  strongSchema,\n  toggleEmphasisCommand,\n  toggleInlineCodeCommand,\n  toggleStrongCommand,\n} from '@milkdown/kit/preset/commonmark'\nimport type { MarkType, Node, NodeType } from '@milkdown/kit/prose/model'\nimport type { Selection } from '@milkdown/kit/prose/state'\nimport clsx from 'clsx'\nimport { linkTooltipAPI } from '@milkdown/kit/component/link-tooltip'\nimport {\n  strikethroughSchema,\n  toggleStrikethroughCommand,\n} from '@milkdown/kit/preset/gfm'\nimport {\n  boldIcon,\n  codeIcon,\n  italicIcon,\n  linkIcon,\n  strikethroughIcon,\n  functionsIcon,\n} from '../../icons'\nimport type { ToolbarFeatureConfig } from './index'\nimport { NodeSelection, TextSelection } from '@milkdown/kit/prose/state'\nimport { mathInlineSchema } from '../latex/inline-latex'\nimport { FeaturesCtx } from '../../core/slice'\nimport { CrepeFeature } from '../..'\n\nexport interface ToolbarProps {\n  ctx: Ctx\n  hide: () => void\n  show: boolean\n  selection: Selection\n  config?: ToolbarFeatureConfig\n}\n\nexport const toolbarComponent: Component<ToolbarProps> = ({\n  ctx,\n  hide,\n  show,\n  config,\n  selection,\n}) => {\n  const update = useUpdate()\n  useEffect(() => {\n    update()\n  }, [show])\n\n  const onClick = (fn: (ctx: Ctx) => void) => (e: MouseEvent) => {\n    e.preventDefault()\n    ctx && fn(ctx)\n    update()\n  }\n\n  const isActive = (mark: MarkType) => {\n    if (!ctx || !selection) return false\n    const view = ctx.get(editorViewCtx)\n    const {\n      state: { doc },\n    } = view\n    return doc.rangeHasMark(selection.from, selection.to, mark)\n  }\n\n  const containsNode = (node: NodeType) => {\n    if (!ctx || !selection) return false\n    const view = ctx.get(editorViewCtx)\n    const {\n      state: { doc },\n    } = view\n    if (selection instanceof NodeSelection) {\n      return selection.node.type === node\n    }\n\n    const { from, to } = selection\n\n    let hasNode = false\n    doc.nodesBetween(from, to, (n) => {\n      if (n.type === node) {\n        hasNode = true\n        return false\n      }\n      return true\n    })\n\n    return hasNode\n  }\n\n  const flags = ctx?.get(FeaturesCtx)\n  const isLatexEnabled = flags?.includes(CrepeFeature.Latex)\n\n  const toggleLatex = (ctx: Ctx) => {\n    const hasLatex = containsNode(mathInlineSchema.type(ctx))\n    const view = ctx.get(editorViewCtx)\n    const { selection, doc, tr } = view.state\n    if (!hasLatex) {\n      const text = doc.textBetween(selection.from, selection.to)\n      let _tr = tr.replaceSelectionWith(\n        mathInlineSchema.type(ctx).create({\n          value: text,\n        })\n      )\n      view.dispatch(\n        _tr.setSelection(NodeSelection.create(_tr.doc, selection.from))\n      )\n      return\n    }\n\n    const { from, to } = selection\n    let pos = -1\n    let node: Node | null = null\n    doc.nodesBetween(from, to, (n, p) => {\n      if (node) return false\n      if (n.type === mathInlineSchema.type(ctx)) {\n        pos = p\n        node = n\n        return false\n      }\n      return true\n    })\n    if (!node || pos < 0) return\n\n    let _tr = tr.delete(pos, pos + 1)\n    const content = (node as Node).attrs.value\n    _tr = _tr.insertText(content, pos)\n    view.dispatch(\n      _tr.setSelection(\n        TextSelection.create(_tr.doc, from, to + content.length - 1)\n      )\n    )\n  }\n\n  return html`<host>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(strongSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleStrongCommand.key)\n      })}\n    >\n      ${config?.boldIcon?.() ?? boldIcon}\n    </button>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(emphasisSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleEmphasisCommand.key)\n      })}\n    >\n      ${config?.italicIcon?.() ?? italicIcon}\n    </button>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(strikethroughSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleStrikethroughCommand.key)\n      })}\n    >\n      ${config?.strikethroughIcon?.() ?? strikethroughIcon}\n    </button>\n    <div class=\"divider\"></div>\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(inlineCodeSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleInlineCodeCommand.key)\n      })}\n    >\n      ${config?.codeIcon?.() ?? codeIcon}\n    </button>\n    ${isLatexEnabled &&\n    html`<button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && containsNode(mathInlineSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick(toggleLatex)}\n    >\n      ${config?.latexIcon?.() ?? functionsIcon}\n    </button>`}\n    <button\n      type=\"button\"\n      class=${clsx(\n        'toolbar-item',\n        ctx && isActive(linkSchema.type(ctx)) && 'active'\n      )}\n      onmousedown=${onClick((ctx) => {\n        const view = ctx.get(editorViewCtx)\n        const { selection } = view.state\n\n        if (isActive(linkSchema.type(ctx))) {\n          ctx.get(linkTooltipAPI.key).removeLink(selection.from, selection.to)\n          return\n        }\n\n        ctx.get(linkTooltipAPI.key).addLink(selection.from, selection.to)\n        hide?.()\n      })}\n    >\n      ${config?.linkIcon?.() ?? linkIcon}\n    </button>\n  </host>`\n}\n\ntoolbarComponent.props = {\n  ctx: Object,\n  hide: Function,\n  show: Boolean,\n  config: Object,\n  selection: Object,\n}\n\nexport const ToolbarElement = c(toolbarComponent)\n", "import { TooltipProvider, tooltipFactory } from '@milkdown/kit/plugin/tooltip'\nimport type { EditorState, PluginView } from '@milkdown/kit/prose/state'\nimport { TextSelection } from '@milkdown/kit/prose/state'\nimport type { Ctx } from '@milkdown/kit/ctx'\nimport type { EditorView } from '@milkdown/kit/prose/view'\nimport type { AtomicoThis } from 'atomico/types/dom'\nimport type { DefineFeature, Icon } from '../shared'\nimport { defIfNotExists } from '../../utils'\nimport type { ToolbarProps } from './component'\nimport { ToolbarElement } from './component'\n\ninterface ToolbarConfig {\n  boldIcon: Icon\n  codeIcon: Icon\n  italicIcon: Icon\n  linkIcon: Icon\n  strikethroughIcon: Icon\n  latexIcon: Icon\n}\n\nexport type ToolbarFeatureConfig = Partial<ToolbarConfig>\n\nconst toolbar = tooltipFactory('CREPE_TOOLBAR')\n\nclass ToolbarView implements PluginView {\n  #tooltipProvider: TooltipProvider\n  #content: AtomicoThis<ToolbarProps>\n  constructor(ctx: Ctx, view: EditorView, config?: ToolbarFeatureConfig) {\n    const content = new ToolbarElement()\n    this.#content = content\n    this.#content.ctx = ctx\n    this.#content.hide = this.hide\n    this.#content.config = config\n    this.#content.selection = view.state.selection\n    this.#tooltipProvider = new TooltipProvider({\n      content: this.#content,\n      debounce: 20,\n      offset: 10,\n      shouldShow(view: EditorView) {\n        const { doc, selection } = view.state\n        const { empty, from, to } = selection\n\n        const isEmptyTextBlock =\n          !doc.textBetween(from, to).length &&\n          selection instanceof TextSelection\n\n        const isNotTextBlock = !(selection instanceof TextSelection)\n\n        const activeElement = (view.dom.getRootNode() as ShadowRoot | Document)\n          .activeElement\n        const isTooltipChildren = content.contains(activeElement)\n\n        const notHasFocus = !view.hasFocus() && !isTooltipChildren\n\n        const isReadonly = !view.editable\n\n        if (\n          notHasFocus ||\n          isNotTextBlock ||\n          empty ||\n          isEmptyTextBlock ||\n          isReadonly\n        )\n          return false\n\n        return true\n      },\n    })\n    this.#tooltipProvider.onShow = () => {\n      this.#content.show = true\n    }\n    this.#tooltipProvider.onHide = () => {\n      this.#content.show = false\n    }\n    this.update(view)\n  }\n\n  update = (view: EditorView, prevState?: EditorState) => {\n    this.#tooltipProvider.update(view, prevState)\n    this.#content.selection = view.state.selection\n  }\n\n  destroy = () => {\n    this.#tooltipProvider.destroy()\n    this.#content.remove()\n  }\n\n  hide = () => {\n    this.#tooltipProvider.hide()\n  }\n}\n\ndefIfNotExists('milkdown-toolbar', ToolbarElement)\nexport const defineFeature: DefineFeature<ToolbarFeatureConfig> = (\n  editor,\n  config\n) => {\n  editor\n    .config((ctx) => {\n      ctx.set(toolbar.key, {\n        view: (view) => new ToolbarView(ctx, view, config),\n      })\n    })\n    .use(toolbar)\n}\n"],
  "mappings": "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",
  "names": ["ctx", "selection", "_tr", "view"]
}
